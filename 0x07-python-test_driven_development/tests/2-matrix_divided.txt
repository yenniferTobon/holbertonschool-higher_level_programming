# 2-matrix_divided.txt
------------------------------------------------------------------------
How to use 2-matrix_divided.txt: the function takes two args, a matrix of
numbers and a number to be the divisor. Returns a new matrix.
------------------------------------------------------------------------

# import module
Test 1: matrix of 1 row, and float
::
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> print(matrix_divided([[10, 5, 20]], 2.5))
    [[4.0, 2.0, 8.0]]


Test 2: rows of the matrix with diferrent size, and int
::
    >>> matrix_divided([[1, 2 , 3], [1]], 3)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size


Test 3: empty matrix, and int
::
    >>> matrix_divided([[], []], 3)
    [[], []]
 

test 4: 1 empty row, and int
::
    >>> matrix_divided([[], [1]], 3)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

test 5: 
::
    >>> matrix_divided([[None], [None]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

test 6:
::
    >>> matrix_divided([["Yenn"], ["Tobon"]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

test 7:
:: 
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0) 
    Traceback (most recent call last):
    ... 
    ZeroDivisionError: division by zero

test 8:
::
    >>> matrix_divided([["1, 2, 3"], ["4, 5, 6"]], "Yenn") 
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

test 9:
::
    >>> matrix_divided([[-1, -2, -3], [-4, -5, -6]], 2)
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

test 10:
::
    >>> type(matrix_divided([[1, 2, 3], [4, 5, 6]], 2))
    <class 'list'>
  
test 11:
::
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], .2)
    [[5.0, 10.0, 15.0], [20.0, 25.0, 30.0]]
